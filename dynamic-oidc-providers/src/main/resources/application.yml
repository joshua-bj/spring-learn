## keycloak
spring:
  security:
    oauth2:
      client:
        provider:
          tenant01:
            issuer-uri: http://localhost:8080/realms/tenant01
          tenant04:
            issuer-uri: http://localhost:8080/realms/tenant04
        registration:
          tenant01:
            provider: tenant01
            client-name: spring-boot-client
            client-id: spring-boot-client
            client-secret: bV04GWXCHEGeAJhTCyPwm0qLNBqJGd3T
            scope: openid,offline_access,profile
            authorization-grant-type: authorization_code
          tenant04:
            provider: tenant04
            client-name: spring-boot-client
            client-id: spring-boot-client
            client-secret: XD7E71SEV6LU1NgP9JroDAz5Sa8vN64Z
            scope: openid,offline_access,profile
            authorization-grant-type: authorization_code

# spring.security.oauth2.client.registration.external.provider=external
# spring.security.oauth2.client.registration.external.client-name=spring-boot-client
# spring.security.oauth2.client.registration.external.client-id=spring-boot-client
# spring.security.oauth2.client.registration.external.client-secret=bV04GWXCHEGeAJhTCyPwm0qLNBqJGd3T
# spring.security.oauth2.client.registration.external.scope=openid,offline_access,profile
# spring.security.oauth2.client.registration.external.authorization-grant-type=authorization_code